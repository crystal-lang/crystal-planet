<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Recent Discussions</title><link>https://planet.crystal-lang.org/</link><description></description><item><title>Inquiry About Contributing to Korean Crystal Documentation</title><link>https://forum.crystal-lang.org/t/inquiry-about-contributing-to-korean-crystal-documentation/8333</link><author>hahwul</author><category>community</category><pubDate>Mon, 11 Aug 2025 00:53:33 +0000</pubDate><source url="https://forum.crystal-lang.org/latest">Forum</source><content:encoded><![CDATA[Could anyone provide information about the correct repository linked to the kr domain or point me to the right resources for contributing to the Korean translation?Additionally, based on the URL, it appears that the repository might be a personal one. I think it would be better to manage it under an organization account, similar to https://github.com/crystal-french, for better collaboration and maintenance. Any thoughts on this? Thank you!]]></content:encoded></item><item><title>Should &apos;embedded Crystal&apos; be Crystal?</title><link>https://forum.crystal-lang.org/t/should-embedded-crystal-be-crystal/8330</link><author>Barney</author><category>community</category><pubDate>Sat, 9 Aug 2025 15:21:08 +0000</pubDate><source url="https://forum.crystal-lang.org/latest">Forum</source><content:encoded><![CDATA[I recently noticed that  files are read as  by github’s linguist, and subsequently by Go-Enry, which is based on linguist.This results in pure crystal projects with config files using embedded crystal listing HTML on code forges.I opened an issue to change  recognition to crystal, but I’m curious what you think.]]></content:encoded></item><item><title>Field study of fiber-local storage</title><link>https://forum.crystal-lang.org/t/field-study-of-fiber-local-storage/8325</link><author>straight-shoota</author><category>community</category><pubDate>Sat, 9 Aug 2025 09:46:37 +0000</pubDate><source url="https://forum.crystal-lang.org/latest">Forum</source><content:encoded><![CDATA[We’re planning to add a stdlib API for fiber-local storage, which is a critical component for concurrent applications.With the need for such a feature and the absence of an official API, Crystal libraries have adopted several custom implementations in order to get things working. But they’re often subpar (in general; they might be fine for the specific use case).The goal is to implement a solid and efficient standard API to replace all currently used makeshift alternatives.In order to understand  Crystal libraries use fiber local storage, I digged through publicly available sources and I’m going to list my findings here. It’s actually quite a large amount of shards using some form of fiber-local storage.I’ve looked for some specific patterns which are commonly associated with fiber-local storage implementations. It’s likely that I missed some more unique implementations. Please add missing use cases in a comment!
I appreciate any comments on the exploration and classification. Do you think it makes sense?This study is intended to inform an RFC about fiber-local storage API for Crystal’s standard library.All implementations I found use one of two base mechanism. Of course, each individual implementation may add different amounts of convenience wrapper around.class Fiber
  property my_fls : String?
end

Fiber.current.my_fls = "foo"
Monkey patching additional properties into  is not ideal. There’s no direct danger besides name clashes with other libraries which do the same. But it’s also not a clean solution.This is equivalent to a class variable, so there’s no direct  mapping.

List of implementations (click for more details)Hash mapping  instances to valuesfibers = Hash(Fiber, String).new.compare_by_identity

MyFLS.fibers[Fiber.current] = "foo"
The hash can be a class or instance property. The latter allows  mappings which is necessary for some use cases (such as connection pools).Some hashes use  instead of the  instance as the key. I’m not sure what’s the point of that. Maybe this predates ?
List of implementations (click for more details)Extra: Thread Local StorageThe different use cases can be classified into several categories:I think there are two different modes of how fiber local variables are used:A fixed property assigned to a fiber. It has exactly one value per fiber (or none through lazy initialization) and that value is unique per fiber. It must not be inherited by child fibers (structured concurrency).
Example: Pool checkouts, transactions, recursion detectionA scoped property which may change over time. Assignments are usually scoped to a specific range of execution, and may be inherited by child fibers (structured concurrency)
Example: observability contexts, configurationA challenge for the stdlib API is how to suit the needs for both of these modes.It’s also important to clarify what are  appropriate use case for fiber-local storage.
I think it is primarily intended for matters of code structure (such as a DB transaction is checked out to one specific strain of execution, i.e. a fiber).12 posts - 5 participants]]></content:encoded></item><item><title>Ambiguous use of `Time::Span` for duration and monotonic clock</title><link>https://forum.crystal-lang.org/t/ambiguous-use-of-time-span-for-duration-and-monotonic-clock/8324</link><author>straight-shoota</author><category>community</category><pubDate>Fri, 8 Aug 2025 17:09:27 +0000</pubDate><source url="https://forum.crystal-lang.org/latest">Forum</source><content:encoded><![CDATA[In the discussion of RFC0014 it became apparent that the  type can lead to confusion. Its primary purpose is to represent a duration of time. But we also use it for a reading of the monotonic clock (). This makes some sense because the monotonic clock is just the time elapsed since some arbitrary point in time.But this double use leads to problems when specifying some kind of timeout or delay: A duration represents a relative distance from the current instant. A monotonic clock reading represents an absolute instant. Either semantic is valid. And the type system makes it impossible to tell them apart.The first proposal for a monotonic clock was actually for  (#3826), but somehow - after intricate discussions about involving  and whether monotonic readings are even necessary on their own - we ended up piggy-bagging  on  (#5108). I believe it was mostly for the sake of simplicity?Maybe it’s time to rethink that? Having a separate type to represent a monotonic clock reading would be very helpful for use cases such as : A  argument represents a relative duration, a  (working title) argument represents an absolute instant.The only affected stdlib API would be . It would be relatively easy to deprecate that and replace it with, for example , or .]]></content:encoded></item><item><title>Extension Methods in Crystal</title><link>https://forum.crystal-lang.org/t/extension-methods-in-crystal/8323</link><author>Haddock</author><category>community</category><pubDate>Fri, 8 Aug 2025 12:30:54 +0000</pubDate><source url="https://forum.crystal-lang.org/latest">Forum</source><content:encoded><![CDATA[I’m new to Crystal and from what I’ve seen so far Crystal does not have them like Ruby.Java does not have them, either. This has resulted in Java in tons of static helper methods being created in separate utility classes, which is quite annoying as it breaks OO thinking and you have to know by heard about all those static utility methods and where the are located.So “foo(bar(a))” could also be written as “a.bar().foo()“My question is whether that would be an idea for Crystal as well. Maybe it would not be that hard to tweak the Crystal compiler to implement a similar solution. I don’t know - just a question ;-).12 posts - 8 participants]]></content:encoded></item><item><title>Ld: warning: object file was built for newer macOS version than being linked</title><link>https://forum.crystal-lang.org/t/ld-warning-object-file-was-built-for-newer-macos-version-than-being-linked/8319</link><author>michaels</author><category>community</category><pubDate>Thu, 7 Aug 2025 22:27:56 +0000</pubDate><source url="https://forum.crystal-lang.org/latest">Forum</source><content:encoded><![CDATA[Sorry, I wanted to reply to the other post, but being a new user I was limited to 3 replies on that topic, so I’ve raised a new one to reply.In that other post I was reporting why when doing ‘crystal run ..’ I would see so many of the following warnings:ld: warning: object file (…o0.o) was built for newer macOS version (15.0) than being linked (11.0)it was suggested by @ysbaddaden that I might need to set the env var $MACOSX_DEPLOYMENT_TARGET and I did set it to “15.5”, and reran, and found that the warnings were suppressed, which is great. However as a new crystal user, I think this is not very intuitive and wonder about the need to see those messages. Why would it be necessary to set this var? Is it possible to invert the situation so those are suppressed by default and enable a var or flag to show those? Thanks.]]></content:encoded></item></channel></rss>