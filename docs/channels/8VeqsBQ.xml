<?xml version="1.0" encoding="utf-8"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Blogs</title><link>https://planet.crystal-lang.org/</link><description></description><item><title>Embedding the Crystal Compiler in Your Program</title><link>https://dev.to/kojix2/embedding-the-crystal-compiler-in-your-program-2ief</link><author>kojix2</author><category>blog</category><pubDate>Sat, 9 Aug 2025 09:46:26 +0000</pubDate><source url="https://dev.to/t/crystal">DEV Community: crystal</source><content:encoded><![CDATA[First, create a new Crystal project.crystal init app duck_egg
duck_egg
Edit the  file as follows.
In this example, we add  and  to the  section.Create  and add the following code.In this program, the Crystal compiler is embedded in the target ðŸ¥š.
When ðŸ¥š is executed, a random bird is selected.
The embedded compiler generates a binary that displays the bird and its sound.First, build the program.Next, check the  environment variable to find the location of the Crystal standard library.The Crystal compiler requires the standard library even for very simple code such as .
Therefore,  must be set to include the path to the standard library.lib:/usr/local/bin/../share/crystal/src
Run the generated binary:By using the Crystal compiler as a library, you can generate and compile code dynamically. This technique can be applied in many interesting ways.]]></content:encoded></item><item><title>Writing SIMD in Crystal with Inline Assembly</title><link>https://dev.to/kojix2/writing-simd-in-crystal-with-inline-assembly-1lkp</link><author>kojix2</author><category>blog</category><pubDate>Thu, 7 Aug 2025 01:28:30 +0000</pubDate><source url="https://dev.to/t/crystal">DEV Community: crystal</source><content:encoded><![CDATA[In this article, we explore how to write SIMD instructionsâ€”SSE for x86\64 and NEON for AArch64â€”using inline assembly in the Crystal programming language.
Crystal uses LLVM as its backend, but it doesnâ€™t yet fully optimize with SIMD.
This is not a performance tuning guide, but rather a fun exploration into low-level programming with Crystal.Crystal provides the  keyword for writing inline assembly. The syntax is based on LLVM's integrated assembler.: LLVM-style assembly code: Registers that will be modified: Optional (e.g., )
  
  
  Types of SIMD Instructions
 for Intel and AMD CPUs (x86_64) for ARM CPUs (like Apple Silicon)General-purpose: , , , , , , , , 
  
  
  Registers Used in AArch64 (NEON)
 = 8 Ã— 16-bit half-precision floats
  
  
  Examples of Register Specification
LLVM assigns SSE registers automaticallyNEON requires explicit register naming in inline assembly  crystal build  llvm-ir foo.cr
  crystal build  asm foo.cr
Use of  and  for low-level memory access
  
  
  Examining LLVM-IR and Assembly
To inspect LLVM IR output:crystal build your_file.cr  llvm-ir crystal build your_file.cr  asm Youâ€™ll see that your inline  blocks are preserved as-is, even with optimizations ().Lloh2300:
        ldr     q1, [x9, lCPI312_43@PAGEOFF]
        add     x8, sp, #164
        add     x9, sp, #128
        str     q0, [sp, #128]
        stur    q1, [x29, #-128]
        ; InlineAsm Start
        ld1.4s  { v0 }, [x9]
        ld1.4s  { v1 }, [x10]
        fadd.4s v2, v0, v1
        st1.4s  { v2 }, [x8]
        ; InlineAsm End
        ldr     q0, [x25]
        str     q0, [sp, #16]
When using SIMD with parallelism, memory bandwidth can become the bottleneck.
Although Crystal currently runs single-threaded by default, true parallelism is in progress, and memory limitations may become relevant in the future.Weâ€™ve explored how to write SIMD operations in Crystal using inline , and examined how those instructions are lowered into LLVM IR and eventually into assembly.This was a deep dive into low-level Crystal.
  
  
  Appendix: SIMD Instruction Reference
Load/store 4 Ã— Float32 (unaligned)Load/store 4 Ã— Float32 (aligned)Load/store 4 Ã— Int32 or 8 Ã— Int16Store scalar Float32 (lowest lane)Horizontal add of Float32 pairsElement-wise max (Float32)Shuffle Float32 lanes (for reduction)Load vector (e.g. , )Pairwise add (Float32 reduction)Pairwise max (Float32 reduction)Vector-wide add (optional)Vector-wide max (optional)SSE's  and  require 16-byte alignment.NEON's ,  reduce in two steps: 4 â†’ 2 â†’ 1. is used with masks like ,  for reordering lanes during reduction.Saturated arithmetic (, ) clamps values on overflow.Thanks for reading â€” and happy crystaling! ðŸ’Ž]]></content:encoded></item><item><title>Building Portable Crystal Binaries on macOS with GitHub Actions</title><link>https://dev.to/kojix2/how-to-distribute-a-statically-linked-crystal-binary-on-macos-with-github-actions-1gc6</link><author>kojix2</author><category>blog</category><pubDate>Mon, 21 Jul 2025 02:34:19 +0000</pubDate><source url="https://dev.to/t/crystal">DEV Community: crystal</source><content:encoded><![CDATA[If youâ€™ve ever tried to share a Crystal tool you built, you may have noticed that distributing it on macOS isnâ€™t as straightforward as on Linux. On Linux, you can just use the official Docker image with musl to build fully static binaries.But macOS is different. Its design doesnâ€™t allow fully static linking, soâ€”just like with Rust or Goâ€”you end up with binaries that must dynamically link to system libraries. These are what we call .By default, Crystal binaries on macOS depend on Homebrew libraries like , , and . Thatâ€™s not really portable. In this post, Iâ€™ll show you how to avoid those dependencies and build more portable binaries for macOS using GitHub Actions.
  
  
  How Crystal Resolves Libraries
Crystal looks for libraries in this order: environment variable from the  annotationTries the specified  nameFalls back to the library nameOnly if both fail does it use a plain  flagHereâ€™s the catch: even if you pass static libraries via , pkg-config runs first. If it succeeds, it usually chooses shared librariesâ€”and ignores the static ones you gave.One way around pkg-config is to symlink the static libraries and link them directly:
  
  
  Method 2: Disable PKG_CONFIG_PATH
Another trick is to simply disable pkg-config so it canâ€™t interfere:Combining both methods is the most reliable -- especially for libraries like  and .The  runner gives you an Apple Silicon (Arm) binaryFor Intel builds, use the  runner
  
  
  Alternative: Homebrew Tap
If you want the easiest experience for users, publishing a Homebrew tap is the way to go. That way, they can build your tool from source and let Homebrew handle dependencies.Still, prebuilt binaries are handy. With the approaches above, you can distribute Crystal binaries on macOS much like you would with Rust.Thatâ€™s it for today. How about sharing the Crystal tool you built over the weekend?]]></content:encoded></item><item><title>A FIRST CLASS RECOVERY HACKER THAT IS TRUSTWORTHY AND RELIABLE. THE HACK ANGELS</title><link>https://dev.to/jay_williams_fb26412ca75d/a-first-class-recovery-hacker-that-is-trustworthy-and-reliable-the-hack-angels-34fh</link><author>Jay Williams</author><category>blog</category><pubDate>Fri, 4 Jul 2025 18:25:43 +0000</pubDate><source url="https://dev.to/t/crystal">DEV Community: crystal</source><content:encoded><![CDATA[I suffered in the hands of scammers losing my crypto assets worth $380,000 to a binary option site online with so much debt on me. I seriously needed the help of a legitimate hacking firm to assist in my case. I went searching for a hacker through the Internet seeking for a possible solution to my predicament and I saw comments about THE HACK ANGELS RECOVERY EXPERT. I had to trust the reviews and contacted them to inquire about their recovery services and what it takes to hire them, they laid down their working terms and conditions which I accepted before they commenced with the recovery. I canâ€™t thank THE HACK ANGELS RECOVERY EXPERT enough for retrieving back my funds from these heartless scammers,My sincere gratitude goes to the woman who commented on how she used THE HACK ANGELS RECOVERY EXPERT to recover her Bitcoin and return it to her wallet. If you ever find yourself in a similar predicament, I highly recommend reaching out to THE HACK ANGELS RECOVERY EXPERT. They are truly a Godsend, and their services can make a significant difference. Thank you once again, THE HACK ANGELS RECOVERY EXPERT, for restoring my lost funds. Get in touch with the team through the info below.WhatsApp +1(520)2 0 0-2 3 2 0If you're in London, you can even visit them in person at their office located at 45-46 Red Lion Street, London WC1R 4PF, UK. Donâ€™t hesitate to reach out if you need help!]]></content:encoded></item></channel></rss>