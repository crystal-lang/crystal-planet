{"id":"EfcLDDAkyqguXw9Vbtcae7fRhxCsY1chPUNLpwbK9oHS42b4dGEMeGvA2hWHB2j3LFSAo7qhibLNgPBcA5djbGp95Jk5T","title":"top scoring links : programming","displayTitle":"Reddit - Programming","url":"https://www.reddit.com/r/programming/top/.rss?sort=top&t=day&limit=6","feedLink":"https://www.reddit.com/r/programming/top/?sort=top&t=day&limit=6","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":6,"items":[{"title":"So Long, Image Layouts: Simplifying Vulkan Synchronisation","url":"https://www.khronos.org/blog/so-long-image-layouts-simplifying-vulkan-synchronisation","date":1750948092,"author":"/u/GamerY7","guid":630,"unread":true,"content":"<p>Synchronization in Vulkan® has long been one of its most notorious challenges, something developers haven’t been shy about reminding us. The Khronos® Vulkan Working Group has been steadily working to <a href=\"https://www.youtube.com/watch?v=NM-SzTHAKGo&amp;t=864s\">make Vulkan a joy to use</a>, and simplifying the synchronization model has been high on our priority list. One of the most frequent developer frustrations has been the complexity of managing image layouts, a pain point we’re tackling head-on with the new <a href=\"https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_unified_image_layouts.html\"><code>VK_KHR_unified_image_layouts</code></a> extension, which aims to eliminate the need for most layout transitions entirely.</p><p>It’s been over a decade since Vulkan’s synchronization model was first designed. At the time, the graphics development community strongly favored explicit control over synchronization, and the Vulkan Working Group responded with an API that prioritized performance on the hardware of that era, delivering maximum flexibility and control to application developers.</p><p>In hindsight—and perhaps unsurprisingly—synchronization has turned out to be one of Vulkan’s most challenging aspects, tripping up both new and seasoned developers. The synchronization model is complex enough that many applications struggle to issue synchronization commands that are efficient <a href=\"https://www.lunarg.com/wp-content/uploads/2024/01/Guide-to-Vulkan-Synchronization-Validation-FINAL-01-18-2024.pdf#page=5\">or even correct</a>. The <a href=\"https://registry.khronos.org/vulkan/specs/latest/man/html/VK_KHR_synchronization2.html\"></a> extension introduced several incremental improvements while largely preserving the foundational principles of Vulkan 1.0’s original approach.</p><p>Since then, modern GPUs have evolved significantly, including how they handle synchronization, making many of Vulkan’s original design constraints increasingly outdated. Recognizing this, the Vulkan Working Group is now actively working to streamline synchronization, aiming to improve usability and make high-performance graphics development more accessible. The newly released <code>VK_KHR_unified_image_layouts</code> extension is a major milestone on that path.</p><p>Vulkan 1.0 introduced several image layouts, with later extensions adding a few more. In practice, though, these layouts typically map to just a handful of actual physical layouts or compression formats. One notable exception is <code>VK_IMAGE_LAYOUT_UNDEFINED</code>, which isn’t a physical layout at all but instead serves to initialize internal metadata for newly created images.</p><p>Image layout transitions in Vulkan exist primarily for three reasons:</p><ol><li> – Transitions from <code>VK_IMAGE_LAYOUT_UNDEFINED</code> serve as image initialization operations.</li><li> – When transferring ownership to or from external queue families or presenting images to the display, transitions may be required to ensure compatibility with external components that don’t support Vulkan’s internal compression schemes.</li><li> – Even within the same Vulkan device, some subsystems may not understand the framebuffer compression used by others. For instance, using depth/stencil or multisampled color attachments outside of a render pass may require decompression on certain hardware.</li></ol><p>With <a href=\"https://registry.khronos.org/vulkan/specs/1.3-extensions/man/html/VK_KHR_unified_image_layouts.html\"><code>VK_KHR_unified_image_layouts</code></a>, the Vulkan Working Group recognizes that the third case— internal incompatibility—is no longer relevant for most modern GPUs. This extension allows developers to bypass the majority of layout transitions, significantly simplifying synchronization and reducing boilerplate. Better yet, nearly all GPU vendors are ready to support this extension on current-generation hardware. It’s already on the Vulkan roadmap, with the goal of including it in the core API.</p><p>At its heart, <code>VK_KHR_unified_image_layouts</code> is a simple but powerful from the driver to the application: it guarantees that  can be used efficiently in nearly all cases. Aside from a few specific scenarios, such as image initialization or presentation, <strong>developers no longer need to use layout transitions at all, just use</strong>!</p><p>Validation layer support is expected in the July Vulkan SDK. As always—and especially with this extension—we strongly recommend enabling <a href=\"https://www.lunarg.com/wp-content/uploads/2024/01/Guide-to-Vulkan-Synchronization-Validation-FINAL-01-18-2024.pdf\">Synchronization Validation</a> in the Vulkan validation layers. Several common synchronization errors are caught by mismatched image layouts, but standard validation will no longer be able to detect these if the layout is set to . </p><p>Vulkan’s core principles—explicit control and low-level access to modern GPU features—aren’t going anywhere. But the Vulkan Working Group is placing greater emphasis on developer experience. Instead of just building new features, we’re revisiting older ones to make them easier to use. <code>VK_KHR_unified_image_layouts</code> is the latest example, and more improvements are on the way.</p><p>We’re excited about a future where synchronization is no longer a source of frustration. But we can’t get there without your valuable feedback. Join the conversation on the Vulkan Discord, or leave a comment below. Let us know how this extension is working for you, what challenges you’re facing, and which pain points you’d like us to tackle next!</p>","contentLength":4814,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1ll1ju8/so_long_image_layouts_simplifying_vulkan/"},{"title":"Malicious npm eslint-config-airbnb-compat Package Hides Detection with Payload Splitting","url":"https://safedep.io/digging-into-dynamic-malware-analysis-signals/","date":1750941506,"author":"/u/Ok_Possibility1445","guid":632,"unread":true,"content":"<p>In our previous blog, we discussed building a large scale <a href=\"https://safedep.io/dynamic-analysis-oss-package-at-scale\">Dynamic Analysis System</a> for malicious open source package identification. Dynamic analysis help in observing actual runtime behaviors and activities for a package, installed in a sandbox environment. It complements our Static Analysis system and helps:</p><ul><li>To verify and correlate static analysis findings with actual runtime behavior</li><li>To overcome the limitations of static analysis which may have false positives and negatives</li><li>To observe how packages actually behave when executed in a controlled environment</li><li>To identify malicious packages that might evade static code analysis</li><li>To reduce the need for human intervention (manual analysis) over time</li></ul><p>The goal of this blog is to share our learnings and approach for identifying malicious packages based on dynamic analysis signals. This is a step towards having a sound and reliable baseline for package installation analysis so that it can be used to identify outliers and anomalies.</p><p>We tracked nearly  events generated from our Dynamic Analysis System, analyzing more than  packages since we started operating this infrastructure. As events are generated, we needed a way to find  activities and potential malicious packages that can be subjected to manual review. This can only be found using heuristics and patterns, not manual review of all events generated by all packages.</p><p>As a first step, we decided to aggregate following information from the events:</p><ul><li>Network Connection, IP Aggregator</li><li>Binary execution on install</li></ul><p>The rationale for these metrics are:</p><ul><li>Irrespective of specific TTP,  payload will eventually be executed by a malicious package</li><li>The payload will either make a network call or execute a command (eg. ) in an unusual way</li></ul><p>This hypothesis can be substantiated by our past observations where we observed multiple malicious packages eventually downloads a 2nd-stage payload from a remote C2 server or uploads data to a remote server (exfiltration).</p><p>Any package installation process always triggers network connections, especially to the source registries such as , ,  etc. We cannot only detect network connections, we have to identify  in the distribution of these connections. To identify outliers, we log every  for these connections and analyze the distribution of these . The following chart shows the distribution of  for network connections:</p><p>Looking at the data, we can spot some interesting patterns. A few IP addresses are  in the distribution. From a security perspective, these rare connections raise red flags since legitimate package installations typically connect to well known, frequently accessed endpoints. The chart below highlights some of these suspicious one-off connections that may be suitable candidates for further investigation:</p><p>For example, looking up IP  on <a href=\"https://www.virustotal.com/\">VirusTotal</a> shows it has been classified as malicious by multiple security vendors.</p><p>Next, we performed  to identify the hostnames of these IP addresses. Below are some of the IP addresses that were resolved to a hostname.</p><p>Looking at the hostnames, domains like , , , and <code>mail.sms-system-alert.com</code> are known malicious domains. In particular,  (Out-of-band Application Security Testing) domains are commonly used for malicious purposes like data exfiltration and command &amp; control. We have seen this in our previous post <a href=\"https://safedep.io/burp-collaborator-for-dependency-confusion-attack\">Burp Collaborator used in Malicious npm Packages</a>.</p><h3>Abnormal Binary Execution</h3><p>Packages introducing pre-compiled binaries during installation is a common observation. For example, top binaries shipped with  and  packages or expected to be present in the system are , , , , ,  and more. They are executed for legitimate purposes, but can be used to harm the system as soon as the package is installed. The following chart shows the distribution of these binaries:</p><p>Looking at the distribution, we can spot suspicious binaries like , , and  that appear infrequently. These unknown executables pose potential security risks, as they can execute malicious code immediately upon package installation, potentially compromising the system before any security controls can detect and prevent the threat.</p><p>While the system is at an early research stage, we present a case study of a real malicious package that was identified using the approach described above. This package is <a href=\"https://www.npmjs.com/package/eslint-config-airbnb-compat\">eslint-config-airbnb-compat</a> and was not detected as malicious by our static analysis system. Following are the high level chain of events that led to the identification of this package:</p><ol><li>Suspicious IP address  was detected in the network connection logs.</li><li>Events were correlated with the package <code>eslint-config-airbnb-compat</code> for which our <a href=\"https://platform.safedep.io/community/malysis/01JVCJ683EREK1JTTRK1HTDW4S\">static analysis report</a> was blind</li><li>Manual analysis did not conclusively identify root cause of this network activity</li><li>Dependency graph analysis identified  as a transitive dependency with stage-2 loader code</li><li>Manual analysis tied the two packages together and confirmed the malicious intent</li></ol><p>For this analysis, the trigger was a low key IP address  that appeared in the network connection logs. The reverse DNS lookup revealed the hostname <code>mail.sms-system-alert.com</code> that was flagged as malicious by VirusTotal. This gave us enough confidence to investigate the package further.</p><p>We backtrack the package which is associated with this event, making connection to this  IP (who’s host was <code>mail.sms-system-alert.com</code>), and found <a href=\"https://www.npmjs.com/package/eslint-config-airbnb-compat\">eslint-config-airbnb-compat</a>. This package appears to impersonate legitimate <a href=\"https://www.npmjs.com/package/eslint-config-airbnb\">eslint-config-airbnb</a> possibly with the goal of starjacking and spoofing its origin to automated security tools.</p><p>We found, <code>eslint-config-airbnb-compat</code> contains a post install script declared in  to execute . This is not totally unusual for a large number of  packages, although it does raise security concerns.</p><pre data-language=\"shell\" tabindex=\"0\"><code></code></pre><p>However, manual analysis revealed multiple unusual behavior. Likely to avoid identification, the  does not have any malicious code. It simply does the following:</p><ul><li>Copy the embedded  to </li></ul><pre data-language=\"js\" tabindex=\"0\"><code></code></pre><ul><li>The  file contains the following</li></ul><pre data-language=\"txt\" tabindex=\"0\"><code></code></pre><blockquote><p> The host  resolves to our target IP address </p></blockquote><ul><li>Execute  if  directory is not present</li></ul><pre data-language=\"js\" tabindex=\"0\"><code></code></pre><p>At this point, we were fairly confident that this package is malicious. However, we needed to identify the root cause of this malicious behavior. We started by analyzing the dependency graph of this package and found  as a transitive dependency with stage-2 loader code. The package  in turn has a post install script:</p><pre data-language=\"shell\" tabindex=\"0\"><code></code></pre><p>The  in  contains interesting code:</p><pre data-language=\"js\" tabindex=\"0\"><code></code></pre><p>When introduced through <code>eslint-config-airbnb-compat</code>, it will have <code>proxy=https://proxy.eslint-proxy.site</code> in the  call above. The above fetch call is expected to fail to trigger  function with  provided error message.</p><pre data-language=\"js\" tabindex=\"0\"><code></code></pre><p>The remote server at <code>https://proxy.eslint-proxy.site</code> can return a  message such as <code>{\"error\": \"&lt;JS Payload&gt;\"}</code> which in turn will be passed to  as an Error object.</p><p>The error handler in turn does the following:</p><ul><li>Decode the message as  string</li></ul><pre data-language=\"js\" tabindex=\"0\"><code></code></pre><ul><li>Constructs a function from the decoded string</li></ul><pre data-language=\"js\" tabindex=\"0\"><code></code></pre><ul><li>Finally executes the remote code</li></ul><pre data-language=\"js\" tabindex=\"0\"><code></code></pre><p>This pretty much confirm the malicious behavior of the entire attack chain. It implements a multi-stage remote code execution attack using a transitive dependency to hide the malicious code.</p><p>Dynamic analysis provides a complementary approach for detecting malicious open source packages that might evade static analysis. By monitoring network connections and binary executions during package installation, we can identify suspicious behaviors that indicate potential threats. The multi-stage attack discovered in the <code>eslint-config-airbnb-compat</code> package demonstrates how sophisticated these attacks can be, using transitive dependencies and obfuscation techniques to hide malicious code.</p><p>As attackers continue to develop increasingly complex methods to compromise the open source software supply chains, combining static and dynamic analysis approaches is essential for effective detection. By focusing on abnormal signals and patterns during runtime, we can better protect our software supply chains against evolving threats and maintain the integrity of the open source ecosystems.</p>","contentLength":7952,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1lkz2oa/malicious_npm_eslintconfigairbnbcompat_package/"},{"title":"Programming as Theory Building: Why Senior Developers Are More Valuable Than Ever","url":"https://cekrem.github.io/posts/programming-as-theory-building-naur/","date":1750935342,"author":"/u/cekrem","guid":635,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1lkx4ts/programming_as_theory_building_why_senior/"},{"title":"The importance of kindness in engineering","url":"https://ashouri.xyz/post/kindnessinengineering","date":1750922027,"author":"/u/AlexandraLinnea","guid":633,"unread":true,"content":"<p>There are many traits I have seen successful engineers have over my years observing and being part of development teams but there is one trait above all others that the most successful engineers have and that is kindness.</p><p>I can hear your eyes rolling from here but hear me out.</p><p>Being kind does not mean being a doormat, minding your p’s and q’s or biting your lip when your team takes an action you disagree with. Sometimes it can mean being direct, arguing or even being a bit too abrupt.</p><p>Remember when you just started out and a senior sat with you and explained some basic concepts behind their code without judgement and patience?</p><p>Remember when you saw a colleague working on a gnarly problem and you stepped in to pair with them or vice versa?</p><p>Remember when you were extremely tired and someone chased you for an update on a piece of work that was not a priority. Instead of snapping at them you took a breath and explained why you could not look into it right now but would circle back to them in a week or so?</p><p>Kindness is not only about reactive patience and being helpful but also influences the way we work. For me a feature of kindness in engineering is keeping documentation like readme’s up to date because you want to help cut down on the time it would take engineers to make progress in future on the same codebase.</p><p>Kindness can also be applied to writing code. For example when you write code you optimise on your team’s ability to read and comprehend the codebase because you want your colleagues to have an easier time onboarding and delivering features in the future rather than optimising on your own personal velocity.</p><p>Kindness can even mean you choose not to make code more readable because your empathy leads you to believing that rearranging a pattern that the team has come to become familiar with would lead to them having to spend more time to understand changes in a codebase with low churn.</p><p>Kindness also means that we write error messages with the user in mind and prioritise product features over and above technical implementation detail because we have of empathy for our users.</p><p>Kindness means that you prioritise tickets that enable the team to ship quicker by reducing setup time through things like docker compose or makefiles.</p><p>Kindness leads to greater cooperation, collaboration and transparency. The most productive teams I have worked on were not smartest but the kindest and the least productive team I ever worked on was ironically probably the smartest.</p><p>There are lots of good engineers in the world but in my opinion the best engineers are the kindest engineers because they not only deliver world class products but they also raise the effectiveness of the entire team.</p>","contentLength":2709,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1lktp8d/the_importance_of_kindness_in_engineering/"},{"title":"DockedUp: A Terminal Dashboard for Docker Containers, Built in Python","url":"https://github.com/anilrajrimal1/dockedup","date":1750898553,"author":"/u/Fragrant_Letter8595","guid":631,"unread":true,"content":"<p>I’ve been working on , a CLI tool that makes monitoring Docker containers easier and more intuitive. If you’re tired of juggling , , and switching terminals to check logs or restart containers, this might be for you!</p><p>DockedUp is a real-time, interactive dashboard that displays your Docker containers’ status, health, CPU, and memory usage in a clean, color-coded terminal view. It automatically groups containers by docker-compose projects and uses emojis to make status (Up 🟢, Down 🔴) and health (Healthy ✅, Unhealthy ⚠️) instantly clear. Navigate containers with arrow keys and use hotkeys to: - : View live logs - : Restart a container - : Stop a container - : Open a shell inside a container</p><p>DockedUp is designed for developers and DevOps engineers who work with Docker containers and want a quick, unified view of their environment without leaving the terminal. It’s ideal for those managing docker-compose stacks in development or small-scale production setups. Whether you’re a Python enthusiast, a CLI lover, or a DevOps pro looking to streamline workflows, DockedUp is built to save you time and hassle.</p><p>Unlike  and , which require multiple commands and terminal switching, DockedUp offers a single, live-updating dashboard with interactive controls. Compared to tools like Portainer (web-based) or lazydocker (another CLI), DockedUp is lightweight, focuses on docker-compose project grouping, and integrates emoji-based visual cues for quick status checks. It’s Python-based, easy to install via PyPI, and doesn’t need a web server, making it a great fit for terminal-centric workflows.</p><p>It’s on PyPI and takes one command to install (I recommend  for CLI tools): <code>bash pipx install dockedup </code> Or: <code>bash pip install dockedup </code> Then run  to start the monitor. Check out the <a href=\"https://github.com/anilrajrimal1/dockedup\">GitHub repo</a> for more details and setup instructions. If you like the project, I’d really appreciate a ⭐ on GitHub to help spread the word!</p><p>I’d love to hear your thoughts—any features you’d like to see or issues you run into? Contributions are welcome (it’s MIT-licensed). </p><p>What’s your go-to way to monitor Docker containers?</p><p>Thanks for checking it out! 🚀</p>","contentLength":2171,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1lkmja0/dockedup_a_terminal_dashboard_for_docker/"},{"title":"Writing Toy Software Is A Joy","url":"https://blog.jsbarretto.com/post/software-is-joy","date":1750880866,"author":"/u/NXGZ","guid":634,"unread":true,"content":"<p>I am a huge fan of Richard Feyman’s famous quote:</p><blockquote><p>“What I cannot create, I do not understand”</p></blockquote><p>I think it’s brilliant, and it remains true across many fields (if you’re willing to be a little creative with the\ndefinition of ‘create’). It is to this principle that I believe I owe everything I’m truly good at. Some will tell you\nto avoid reinventing the wheel, but they’re wrong: you  build your own wheel, because it’ll teach you more about\nhow they work than reading a thousand books on them ever will.</p><p>In 2025, the beauty and craft of writing software is being eroded. AI is threatening to replace us (or, at least, the\nmost joyful aspects of our craft) and software development is being increasingly commodified, measured, packaged, and\nindustrialised. Software development needs more simple joy, and I’ve found that creating toy programs is a great way to\nremember why I started working with computers again.</p><p>Toy programs follow the 80:20 rule: 20% of the work, 80% of the functionality. The point is  to build\nproduction-worthy software (although it is true that some of the best production software began life as a toy).\nAggressively avoid over-engineering, restrict yourself to only whatever code is necessary to achieve your goal. Have\nevery code path panic/crash until you’re forced to implement it to make progress. You might be surprised by just how\neasy it is to build toy versions of software you might previously have considered to be insummountably difficult to\ncreate.</p><p>I’ve been consistently surprised by just how often some arcane nugget of knowledge I’ve acquired when working on a toy\nproject has turned out to be immensely valuable in my day job, either by giving me a head-start on tracking down a\nproblem in a tool or library, or by recognising mistakes before they’re made.</p><p>Understanding the constraints that define the shape of software is vital for working with it, and there’s no better way\nto gain insight into those constraints than by running into them head-first. You might even come up with some novel\nsolutions!</p><p>Here is a list of toy programs I’ve attempted over the past 15 years, rated by difficulty and time required. These\nratings are estimates and assume that you’re already comfortable with at least one general-purpose programming language\nand that, like me, you tend to only have an hour or two per day free to write code. Also included are some suggested\nresources that I found useful.</p><h3>Regex engine (difficulty = 4/10, time = 5 days)</h3><p>A regex engine that can read a POSIX-style regex program and recognise strings that match it. Regex is simple yet\nshockingly expressive, and writing a competent regex engine will teach you everything you need to know about using the\nlanguage too.</p><h3>x86 OS kernel (difficulty = 7/10, time = 2 months)</h3><p>A multiboot-compatible OS kernel with a simple CLI, keyboard/mouse driver, ANSI escape sequence support, memory manager,\nscheduler, etc. Additional challenges include writing an in-memory filesystem, user mode and process isolation, loading\nELF executables, and supporting enough video hardware to render a GUI.</p><h3>GameBoy/NES emulator (difficulty = 6/10, time = 3 weeks)</h3><p>A crude emulator for the simplest GameBoy or NES games. The GB and the NES are classics, and both have relatively simple\ninstruction sets and peripheral hardware. Additional challenges include writing competent PPU (video) and PSG (audio)\nimplementations, along with dealing with some of the more exotic cartridge formats.</p><h3>GameBoy Advance game (difficulty = 3/10, time = 2 weeks)</h3><p>A sprite-based game (top-down or side-on platform). The GBA is a beautiful little console to write code for and there’s\nan active and dedicated development community for the console. I truly believe that the GBA is one of the last game\nconsoles that can be fully and completely understood by a single developer, right down to instruction timings.</p><h3>Physics engine (difficulty = 5/10, time = 1 week)</h3><p>A 2D rigid body physics engine that implements Newtonian physics with support for rectangles, circles, etc. On the\nsimplest end, just spheres that push away from one-another is quite simple to implement. Things start to get complex\nwhen you introduce more complex shapes, angular momentum, and the like. Additional challenges include making collision\nresolution fast and scaleable, having complex interactions move toward a steady state over time, soft-body interactions,\netc.</p><h3>Dynamic interpreter (difficulty = 4/10, time = 1-2 weeks)</h3><p>A tree-walking interpreter for a JavaScript-like language with basic flow control. There’s an unbounded list of extra\nthings to add to this one, but being able to write programs in my own language still gives me child-like elation. It\nfeels like a sort of techno-genesis: once you’ve got your own language, you can start building the universe within it.</p><h3>Compiler for a C-like (difficulty = 8/10, time = 3 months)</h3><p>A compiler for a simply-typed C-like programming language with support for at least one target archtecture. Extra\nchallenges include implementing some of the most common optimisations (inlining, const folding, loop-invariant code\nmotion, etc.) and designing an intermediate representation (IR) that’s general enough to support multiple backends.</p><h3>Text editor (difficulty = 5/10, time = 2-4 weeks)</h3><p>This one has a lot of variability. At the blunt end, simply reading and writing a file can be done in a few lines of\nPython. But building something that’s closer to a daily driver gets more complex. You could choose to implement the UI\nusing a toolkit like QT or GTK, but I personally favour an editor that works in the console. Properly handling unicode,\nsyntax highlighting, cursor movement, multi-buffer support, panes/windows, tabs, search/find functionality, LSP support,\netc. can all add between a week or a month to the project. But if you persist, you might join the elite company of those\ndevelopers who use an editor of their own creation.</p><h3>Async runtime (difficulty = 6/10, time = 1 week)</h3><p>There’s a lot of language-specific variability as to what ‘async’ actually means. In Rust, at least, this means a\nlibrary that can ingest  tasks and poll them concurrently until completion. Adding support for I/O waking\nmakes for a fun challenge.</p><h3>Hash map (difficulty = 4/10, time = 3-5 days)</h3><p>Hash maps (or sets/dictionaries, as a higher-level language might call them) are a programmer’s bread &amp; butter. And yet,\nsurprisingly few of us understand how they really work under the bonnet. There are a plethora of techniques to throw\ninto the mix too: closed or open addressing, tombstones, the robin hood rule, etc. You’ll gain an appreciation for when\nand why they’re fast, and also when you should just use a vector + linear search.</p><h3>Rasteriser / texture-mapper (difficulty = 6/10, time = 2 weeks)</h3><p>Most of us have played with simple 3D graphics at some point, but how many of us truly understand how the graphics\npipeline works and, more to the point, how to fix it when it doesn’t work? Writing your own software rasteriser will\ngive you that knowledge, along with a new-found appreciation for the beauty of vector maths and half-spaces that have\napplications across many other fields. Additional complexity involves properly implementing clipping, a Z-buffer, N-gon\nrasterisation, perspective-correct texture-mapping, Phong or Gouraud shading, shadow-mapping, etc.</p><h3>SDF Rendering (difficulty = 5/10, time = 3 days)</h3><p>Signed Distance Fields are a beautifully simple way to render 3D spaces defined through mathematics, and are perfectly\nsuited to demoscene shaders. With relatively little work you can build yourself a cute little visualisation or some\nmoving shapes like the graphics demos of the 80s. You’ll also gain an appreciation for shader languages and vector\nmaths.</p><h3>Voxel engine (difficulty = 5/10, time = 2 weeks)</h3><p>I doubt there are many reading this that haven’t played Minecraft. It’s surprisingly easy to build your own toy voxel\nengine cut from a similar cloth, especially if you’ve got some knowledge of 3D graphics or game development already. The\nsimplicity of a voxel engine, combined with the near-limitless creativity that can be expressed with them, never ceases\nto fill me with joy. Additional complexity can be added by tackling textures, more complex procedural generation,\nfloodfill lighting, collisions, dynamic fluids, sending voxel data over the network, etc.</p><h3>Threaded Virtual Machine (difficulty = 6/10, time = 1 week)</h3><p>Writing interpreters is great fun. What’s more fun? . If you keep pushing interpreters as far as\nthey can go without doing architecture-specific codegen (like AOT or JIT), you’ll eventually wind up (re)discovering\n (not to be confused with multi-threading, which is a very different beast). It’s a beautiful way of\nweaving programs together out highly-optimised miniature programs, and a decent implementation can even give an AOT\ncompiler a run for its money in the performance department.</p><h3>GUI Toolkit (difficulty = 6/10, time = 2-3 weeks)</h3><p>Most of us have probably cobbled together a GUI program using tkinter, GTK, QT, or WinForms. But why not try writing\nyour GUI toolkit? Additional complexity involves implementing a competent layout engine, good text shaping (inc.\nunicode support), accessibility support, and more. Fair warning: do not encourage people to use your tool unless it’s\n - the world has enough GUIs with little-to-no accessibility or localisation support.</p><h3>Orbital Mechanics Sim (difficulty = 6/10, time = 1 week)</h3><p>A simple simulation of Newtonian gravity can be cobbled together in a fairly short time. Infamously, gravitational\nsystems with more than two bodies cannot be solved analytically, so you’ll have to get familiar with iterative\n methods. Additional complexity comes with implementing more precise and faster integration methods,\naccounting for relativistic effects, and writing a visualiser. If you’ve got the maths right, you can even try plugging\nin real numbers from NASA to predict the next high tide or full moon.</p><h3>Bitwise Challenge (difficulty = 3/10, time = 2-3 days)</h3><p>Here’s one I came up with for myself, but I think it would make for a great game jam: write a game that only persists 64\nbits of state between subsequent frames. That’s 64 bits for everything: the entire frame-for-frame game state should be\nreproducible using only 64 bits of data. It sounds simple, but it forces you to get incredibly creative with your game\nstate management. Details about the rules can be found on the GitHub page below.</p><h3>An ECS Framework (difficulty = 4/10, time = 1-2 weeks)</h3><p>For all those game devs out there: try building your own <a href=\"https://en.wikipedia.org/wiki/Entity_component_system\">ECS</a>\nframework. It’s not as hard as you might think (you might have accidentally done it already!). Extra points if you can\nbuild in safety and correctness features, as well as good integration with your programming language of choice’s type\nsystem features.</p><p>I built a custom ECS for my <a href=\"https://www.youtube.com/watch?v=nS5rj80L-pk\">Super Mario 64 on the GBA</a> project due to the\nunique performance and memory constraints of the platform, and enjoyed it a lot.</p><h3>CHIP-8 Emulator (difficulty = 3/10, time = 3-6 days)</h3><p>The <a href=\"https://en.wikipedia.org/wiki/CHIP-8\">CHIP-8</a> is a beautifully simple virtual machine from the 70s. You can write\na fully compliant emulator in a day or two, and there are an enormous plethora of fan-made games that run on it.\n<a href=\"https://github.com/zesterer/emul8/raw/refs/heads/master/test/test.ch8\">Here’s</a> a game I made for it.</p><h3>Chess engine (difficulty = 5/10, time = 2-5 days)</h3><p>Writing a chess engine is great fun. You’ll start off with every move it makes being illegal, but over time it’ll get\nsmart and smarter. Experiencing a loss to your own chess engine really is a rite of passage, and it feels magical.</p><h3>POSIX shell (difficulty = 4/10, time = 3-5 days)</h3><p>We interact with shells every day, and building one will teach you can incredible amount about POSIX - how it works, and\nhow it doesn’t. A simple one can be built in a day, but compliance with an existing shell language will take time and\nteach you more than you ever wanted to know about its quirks.</p><h2>A note on learning and LLMs</h2><p>Perhaps you’re a user of LLMs. I get it, they’re neat tools. They’re useful for certain kinds of learning. But I might\nsuggest resisting the temptation to use them for projects like this. Knowledge is not supposed to be fed to you on a\nplate. If you want that sort of learning, read a book - the joy in building toy projects like this comes from an\nexploration of the unknown, without polluting one’s mind with an existing solution. If you’ve been using LLMs for a\nwhile, this cold-turkey approach might even be painful at first, but persist. There is no joy without pain.</p><p>The runner’s high doesn’t come to those that take the bus.</p>","contentLength":12598,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://www.reddit.com/r/programming/comments/1lkfk1c/writing_toy_software_is_a_joy/"}],"tags":["dev","reddit"]}