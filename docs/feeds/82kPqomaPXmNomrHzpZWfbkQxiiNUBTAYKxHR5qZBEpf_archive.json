{"id":"82kPqomaPXmNomrHzpZWfbkQxiiNUBTAYKxHR5qZBEpf","title":"Hacker News: Show HN","displayTitle":"HN Show","url":"https://hnrss.org/show?points=60","feedLink":"https://news.ycombinator.com/shownew","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":20,"items":[{"title":"Show HN: I built an AI dataset generator","url":"https://github.com/metabase/dataset-generator","date":1750949912,"author":"matthewhefferon","guid":223,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44388093"},{"title":"Show HN: Scream to Unlock – Blocks social media until you scream “I'm a loser”","url":"https://news.ycombinator.com/item?id=44375761","date":1750848596,"author":"madinmo","guid":222,"unread":true,"content":"Hi all,<p>I kept wasting time on social media, even though I’d promised myself I’d stay focused. Regular site blockers didn’t help.</p><p>I needed something that felt annoying enough to break the habit. That’s how the idea came up: make the blocker ask me to say something embarrassing out loud before it lets me back in. If I actually have to yell “I’m a loser” into my mic. Even better - the louder I screamed, the more time I’d get.</p><p>So I put together Scream to Unlock. It’s silly, but so far it’s done its job. My social feeds stay locked unless I really want them.</p>","contentLength":577,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44375761"},{"title":"Show HN: Oasis – An open-source, 3D-printed smart terrarium","url":"https://github.com/justbuchanan/oasis","date":1750773821,"author":"jbuch","guid":221,"unread":true,"content":"<p>This project is an enclosure for growing plants. Features include:</p><pre><code>  - high-power LED lighting\n  - a built-in water tank and mister\n  - fans for airflow\n  - temperature and humidity sensing\n  - wi-fi connectivity and a web-based interface for control and monitoring (see https://oasis-terrarium.com/docs/usage_guide/#web-interface)\n</code></pre>\nThe entire project is open-source:<pre><code>  - electronics: designed in KiCad\n  - 3D models: designed in CadQuery\n  - software: written in Rust\n</code></pre>\nI initially started this project during COVID and built a working prototype using a Raspberry Pi and off-the-shelf parts. The first prototype worked, but was pretty rough. Several months ago, I picked up the project again and began a complete re-design. After two rounds of circuit board design and countless iterations of the 3D-printed parts, I'm finally happy with the results. Along the way I learned a lot about electronics design and fabrication, 3D modeling, and Rust.<p>Happy to answer any questions - thanks for checking it out!</p><p>Here are some direct links to parts of the project you may find interesting:</p><pre><code>  - demo video: https://oasis-terrarium.com\n  - detailed build guide with pictures: https://oasis-terrarium.com/docs/build_guide/\n  - interactive 3D model: https://oasis-terrarium.com/docs/3dmodel/\n  - detailed info on electronics design: https://oasis-terrarium.com/docs/electronics/\n  - 3D-printable models: https://www.printables.com/model/1315117-oasis-smart-terrarium</code></pre>","contentLength":1450,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44366395"},{"title":"Show HN: Autumn – Open-source infra over Stripe","url":"https://github.com/useautumn/autumn","date":1750769328,"author":"ayushrodrigues","guid":220,"unread":true,"content":"<p>Hey HN, I’m Ayush from Autumn (<a href=\"https://useautumn.com/\">https://useautumn.com/</a>). Autumn is an open source layer over Stripe that decouples pricing and billing logic from your application. We let you efficiently manage pricing plans, feature permissions, and payments, regardless of the pricing model being used. It’s a bit like if Supabase and Stripe had a baby.</p><p>Typically, you have to write code to handle checkouts, upgrades/downgrades, failed payments, then receive webhooks to provision features, reset usage limits etc. We abstract this into one function call for all payments flows (checkouts, upgrades, downgrades etc), one function to record usage (so we can track usage limits), and a customer state React hook you can access from your frontend (to handle paywalls, display usage data etc).</p><p>Stripe’s great! But there are 2 main reasons people use Autumn over a direct Stripe setup:</p><p>(1) Billing infra can get complex. After payments, there’s still handling webhooks, permission management, metering, usage resets, and connecting them all to upgrade, downgrade, cancellation and failed payments states.</p><p>(2) Growing companies iterate on pricing often: raising prices, experimenting with credits or charging for new features, etc. We save you from having to handle usage-based limits (super common in pricing today), rebuilding in-app flows, DB migrations, internal dashboards for custom pricing, and grandfathering users on different pricing.</p><p>Ripping out billing flows etc, really sucks. With Autumn, you just make pricing changes in our UI and it all auto-updates. We have a shadcn/ui component library that helps with this.</p><p>Because we support a lot of different pricing models (subscriptions, usage, credits, seat based etc), we have to handle a lot of different scenarios and cases under the hood. We try to keep setup simple while maintaining flexibility of a native integration. Here’s a little snippet of the architecture of our main endpoint: <a href=\"https://useautumn.com/blog/attach\">https://useautumn.com/blog/attach</a></p><p>Currently, the users who get the most value out of us are founders that need to move fast and keep things flexible, but also new/non-technical devs that are more AI native.</p><p>We’d love to hear your feedback and how we could make it better!</p>","contentLength":2206,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44365620"},{"title":"Show HN: Comparator - I built a free, open-source app to compare job offers","url":"https://comparator-one.vercel.app/","date":1750723247,"author":"MediumD","guid":219,"unread":true,"content":"<!DOCTYPE html>","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44361475"},{"title":"Show HN: Weather Watching","url":"https://walzr.com/weather-watching","date":1750695948,"author":"walz","guid":218,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44357391"},{"title":"Show HN: Lego Island Playable in the Browser","url":"https://isle.pizza/","date":1750633380,"author":"foxtacles","guid":217,"unread":true,"content":"<div><p>Welcome to the LEGO Island web port project! This is a recreation of the classic 1997 PC game, rebuilt to run in modern web browsers using Emscripten.</p><p>This incredible project stands on the shoulders of giants. It was made possible by the original <a href=\"https://github.com/isledecomp/isle\" target=\"_blank\" rel=\"noopener noreferrer\">decompilation project</a>, which was then adapted into a <a href=\"https://github.com/isledecomp/isle-portable\" target=\"_blank\" rel=\"noopener noreferrer\">portable version</a>. This represents a year-long effort, involving thousands of hours of work from many awesome contributors dedicated to preserving this piece of gaming history.</p><p>Our goal is to make this classic accessible to everyone. The project is still in development, so you may encounter bugs. Your patience and feedback are greatly appreciated!</p></div>","contentLength":646,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44351028"},{"title":"Show HN: A Tool to Summarize Kenya's Parliament with Rust, Whisper, and LLMs","url":"https://github.com/c12i/bunge-bits","date":1750613584,"author":"collinsmuriuki","guid":216,"unread":true,"content":"<p>Bunge Bits summarizes long parliamentary sessions from the Kenyan National Assembly and Senate. Built with Rust, Whisper v3, and GPT-4o.</p><p>Sessions are typically 3–7 hours long, mixing English and Swahili. This tool transcribes, chunks, and summarizes them to make political content more accessible and searchable for the public.</p>","contentLength":328,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44348649"},{"title":"Show HN: Report idling vehicles in NYC (and get a cut of the fines) with AI","url":"https://apps.apple.com/us/app/idle-reporter-for-nyc-dep/id6747315971","date":1750612011,"author":"rafram","guid":215,"unread":true,"content":"<p dir=\"false\" data-test-bidi=\"\">Reporting idling commercial vehicles in NYC from start to finish with a single app. Idle Reporter makes the idling complaint process easy: five minutes from hitting record to hitting submit.<p>• AI-Powered Form Filling: No more copying down addresses. Idle Reporter AI completes the report for you in one tap (subscription required).</p>• Timestamp Camera: Record videos with time, date, and location. See how long you have left while you record.<p>• Timestamp Existing Videos: Record videos with time, date, and location. See how long you have left while you record.</p>• Easy Manual Editor: Prefer to DIY your report? Idle Reporter makes it quick and easy to fill out forms directly on your phone.<p>• Screenshot Generator: Automatically clip required license plate and owner info screenshots from your video.• Timestamp Camera: Record videos with time, date, and location. See how long you have left while you record.</p>• Status Tracker: Keep reports in Idle Reporter, then submit them to DEP as soon as you're ready.<p>Idle Reporter is an unofficial utility for filling out idling complaint forms. It isn't perfect. You alone are responsible for making sure that your reports are complete and accurate. Proof by Induction LLC is not affiliated with the Department of Environmental Protection or any other agency.</p><p>Terms of Use: https://www.apple.com/legal/internet-services/itunes/dev/stdeula/</p></p>","contentLength":1386,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44348448"},{"title":"Show HN: I'm a doctor and built a responsive breathing app for anxiety and sleep","url":"https://apps.apple.com/us/app/lungy-breathing-exercises/id1545223887","date":1750585215,"author":"lukko","guid":214,"unread":true,"content":"<p dir=\"false\" data-test-bidi=\"\">** App of the Day, March 2025 ** – Apple** Featured in Mashable, TechCrunch, ItsNiceThat and WePresent **<p>Feel happier &amp; healthier with Lungy — the breathing app that recognizes and responds to your breath, helping you feel calmer and more relaxed. </p><p>Developed by doctors, Lungy has been featured in 40+ countries, is trusted by over 100k users. It was reviewed as “The Most Beautiful Breathing App” - find out why by trying Lungy today!</p><p>It’s simple: breathe into your iPhone and watch how your breath transforms the graphics on your screen!</p><p>• Exercises are unique, exciting, interactive, and customizable! </p>• Lungy was developed by Doctors using the latest research on breathing techniques.<p>• Get access to personalized progress and feedback to breathe, relax, and sleep better.  </p>• No wi-fi or internet required! Lungy is always there whenever you need it.<p>The free version of Lungy gives you unlimited access to daily breathing exercises, but for the full experience, consider trying Lungy Deluxe: </p>• Access to ALL exercises and visuals.<p>ª FULLY customized exercises to suit your needs</p>ª FULLY personalized reports and exercise dataWe’d love to hear from you! If you have feedback or suggestions or see any bugs, please contact hello@lungy.app. We're working on an iPad version and will let you know as soon as it's available :)<p>Other Information on using Lungy:</p>- Privacy: Lungy never shares any breathing, microphone, video, or usage data.<p>- Data Security: All data will remain securely on your phone, and only you have access to it. It is encrypted and never shared.</p>- HealthKit Integration: Supports tracking 'Mindful Minutes', which can be enabled in 'Settings'.<p>- Informed Consent: For full details on our privacy practices, please read our Privacy Policy (https://www.lungy.app/privacy-policy) and Terms and Conditions (https://www.lungy.app/terms-and-conditions).</p>- Medical Disclaimer: If you have a medical condition, please read our Medical Disclaimer (https://www.lungy.app/medical-disclaimer) and consult your doctor before using the app.<p>Note from Apple on subscriptions:</p><p>A subscription purchase will be automatically applied to your iTunes account at the end of the trial period. Subscriptions will automatically renew unless canceled within 24 hours before the end of the current period. You can cancel anytime with your iTunes account settings. Any unused portion of a free trial will be forfeited if you purchase a subscription. </p><p>Thank you for choosing Lungy - we hope you love using it :) </p></p>","contentLength":2513,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44345451"},{"title":"Show HN: MMOndrian","url":"https://mmondrian.com/","date":1750502361,"author":"neural_thing","guid":213,"unread":true,"content":"<div> Add/Delete Line</div><div> Add/Delete Line</div>","contentLength":32,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44336381"},{"title":"Show HN: Inspect and extract files from MSI installers directly in your browser","url":"https://pymsi.readthedocs.io/en/latest/msi_viewer.html","date":1750449841,"author":"rmast","guid":212,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44331518"},{"title":"Show HN: Nxtscape – an open-source agentic browser","url":"https://github.com/nxtscape/nxtscape","date":1750437355,"author":"felarof","guid":211,"unread":true,"content":"<p>Hi HN - we're Nithin and Nikhil, twin brothers and founders of nxtscape.ai (YC S24). We're building Nxtscape (\"next-scape\") - an open-source, agentic browser for the AI era.</p><p>-- Why bother building a new browser?\nFor the first time since Netscape was released in 1994, it feels like we can reimagine browsers from scratch for the age of AI agents. The web browser of tomorrow might not look like what we have today.</p><p>We saw how tools like Cursor gave developers a 10x productivity boost, yet the browser—where everyone else spends their entire workday—hasn't fundamentally changed.</p><p>And honestly, we feel like we're constantly fighting the browser we use every day. It's not one big thing, but a series of small, constant frustrations. I'll have 70+ tabs open from three different projects and completely lose my train of thought. And simple stuff like reordering tide pods from amazon or filling out forms shouldn't need our full attention anymore. AI can handle all of this, and that's exactly what we're building.</p><p>-- What makes us different\nWe know others are exploring this space (Perplexity, Dia), but we want to build something open-source and community-driven. We're not a search or ads company, so we can focus on being privacy-first – Ollama integration, BYOK (Bring Your Own Keys), ad-blocker.</p><p>Btw we love what Brave started and stood for, but they've now spread themselves too thin across crypto, search, etc. We are laser-focused on one thing: making browsers work for YOU with AI. And unlike Arc (which we loved too but got abandoned), we're 100% open source. Fork us if you don't like our direction.</p><p>-- Our journey hacking a new browser\nTo build this, we had to fork Chromium. Honestly, it feels like the only viable path today—we've seen others like Brave (started with electron) and Microsoft Edge learn this the hard way.</p><p>We also started with why not just build an extension. But realized we needed more control. Similar to the reason why Cursor forked VSCode. For example, Chrome has this thing called the Accessibility Tree - basically a cleaner, semantic version of the DOM that screen readers use. Perfect for AI agents to understand pages, but you can't use it through extension APIs.</p><p>That said, working with the 15M-line C++ chromium codebase has been an adventure. We've both worked on infra at Google and Meta, but Chromium is a different beast. Tools like Cursor's indexing completely break at this scale, so we've had to get really good with grep and vim. And the build times are brutal—even with our maxed-out M4 Max MacBook, a full build takes about 3 hours.</p><p>Full disclosure: we are still very early, but we have a working prototype on GitHub. It includes an early version of a \"local Manus\" style agent that can automate simple web tasks, plus an AI sidebar for questions, and other productivity features (grouping tabs, saving/resuming sessions, etc.).</p><p>Looking forward to any and all comments!</p>","contentLength":2921,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44329457"},{"title":"Show HN: Pickaxe – A TypeScript library for building AI agents","url":"https://github.com/hatchet-dev/pickaxe","date":1750435671,"author":"abelanger","guid":210,"unread":true,"content":"<p>Hey HN, Gabe and Alexander here from Hatchet. Today we're releasing Pickaxe, a Typescript library to build AI agents which are scalable and fault-tolerant.</p><p>Pickaxe provides a simple set of primitives for building agents which can automatically checkpoint their state and suspend or resume processing (also known as durable execution) while waiting for external events (like a human in the loop). The library is based on common patterns we've seen when helping Hatchet users run millions of agent executions per day.</p><p>Unlike other tools, Pickaxe is not a framework. It does not have any opinions or abstractions for implementing agent memory, prompting, context, or calling LLMs directly. Its only focus is making AI agents more observable and reliable.</p><p>As agents start to scale, there are generally three big problems that emerge:\n1. Agents are long-running compared to other parts of your application. Extremely long-running processes are tricky because deploying new infra or hitting request timeouts on serverless runtimes will interrupt their execution. \n2. They are stateful: they generally store internal state which governs the next step in the execution path\n3. They require access to lots of fresh data, which can either be queried during agent execution or needs to be continuously refreshed from a data source.</p><p>(These problems are more specific to agents which execute remotely -- locally running agents generally don't have these problems)</p><p>Pickaxe is designed to solve these issues by providing a simple API which wraps durable execution infrastructure for agents. Durable execution is a way of automatically checkpointing the state of a process, so that if the process fails, it can automatically be replayed from the checkpoint, rather than starting over from the beginning. This model is also particularly useful when your agent needs to wait for an external event or human review in order to continue execution. To support this pattern, Pickaxe uses a Hatchet feature called `waitFor` which durably registers a listener for an event, which means that even if the agent isn't actively listening for the event, it is guaranteed to be processed by Hatchet and stored in the execution history and resume processing. This infrastructure is powered by what is essentially a linear event log, which stores the entire execution history of an agent in a Postgres database managed by Hatchet.</p><p>We'd greatly appreciate any feedback you have and hope you get the chance to try out Pickaxe.</p>","contentLength":2485,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44329102"},{"title":"Show HN: SnapQL – Desktop app to query Postgres with AI","url":"https://github.com/NickTikhonov/snap-ql","date":1750417698,"author":"nicktikhonov","guid":209,"unread":true,"content":"<p>SnapQL is an open-source desktop app (built with Electron) that lets you query your Postgres database using natural language. It’s schema-aware, so you don’t need to copy-paste your schema or write complex SQL by hand.</p><p>Everything runs locally — your OpenAI API key, your data, and your queries — so it's secure and private. Just connect your DB, describe what you want, and SnapQL writes and runs the SQL for you.</p>","contentLength":420,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44326620"},{"title":"Show HN: Tool to Automatically Create Organized Commits for PRs","url":"https://github.com/edverma/git-smart-squash","date":1750389779,"author":"edverma2","guid":208,"unread":true,"content":"<p>I've found it helps PR reviewers when they can look through a set of commits with clear messages and logically organized changes. Typically reviewers prefer a larger quantity of smaller changes versus a smaller quantity of larger changes. Sometimes it gets really messy to break up a change into sufficiently small PRs, so thoughtful commits are a great way of further subdividing changes in PRs. It can be pretty time consuming to do this though, so this tool automates the process with the help of AI.</p><p>The tool sends the diff of your git branch against a base branch to an LLM provider. The LLM provider responds with a set of suggested commits with sensible commit messages, change groupings, and descriptions. When you explicitly accept the proposed changes, the tool re-writes the commit history on your branch to match the LLM's suggestion. Then you can force push your branch to your remote to make it match.</p><p>The default AI provider is your locally running Ollama server. Cloud providers can be explicitly configured via CLI argument or in a config file, but keeping local models as the default helps to protect against unintentional data sharing. The tool always creates a backup branch in case you need to easily revert in case of changing your mind or an error in commit re-writing. Note that re-writing commit history to a remote branch requires a force push, which is something your team/org will need to be ok with. As long as you are working on a feature branch this is usually fine, but it's always worth checking if you are not sure.</p>","contentLength":1547,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44324457"},{"title":"Show HN: Ts-SSH – SSH over Tailscale without running the daemon","url":"https://github.com/derekg/ts-ssh","date":1750388585,"author":"i8code","guid":207,"unread":true,"content":"<p>ts-ssh solves a specific problem: accessing machines on your Tailnet from\n  environments where you can't install the full Tailscale daemon (like CI/CD runners or\n   restricted systems).</p><pre><code>  It uses Tailscale's tsnet library to establish userspace connectivity, then provides\n  a standard SSH experience. Works with existing workflows since it supports normal SSH\n   features like ProxyCommand, key auth, and terminal handling.\n\n  Some features that proved useful:\n  • Parallel command execution across multiple hosts\n  • Built-in tmux session management for multi-host work\n  • SCP-style file transfers\n  • Works on Linux/macOS/Windows (AMD64 and ARM64)\n\n  The codebase is interesting from a development perspective - it was written almost\n  entirely using AI tools (mainly Claude Code, with some OpenAI and Jules). Not as an\n  experiment, but because it actually worked well for this kind of systems programming.\n   Happy to discuss the workflow if anyone's curious about that aspect.\n\n  Source and binaries are on GitHub. Would appreciate feedback from anyone dealing with\n   similar connectivity challenges.</code></pre>","contentLength":1115,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44324378"},{"title":"Show HN: I wrote a new BitTorrent tracker in Elixir","url":"https://github.com/Dahrkael/ExTracker","date":1750373389,"author":"dahrkael","guid":206,"unread":true,"content":"<p>I'm currently in a journey to learn and improve my Elixir and Go skills (my daily job uses C++) and looking through my backlog for projects to take on I decided Elixir is the perfect language to write a highly-parallel BitTorrent tracker.\nSo I have spent my free time these last 3 months writing one! Now I think it has enough features to present it to the world (and a docker image to give it a quick try).</p><p>I know some people see trackers as relics of the past now that DHT and PEX are common but I think they still serve a purpose in today's Internet (purely talking about public trackers). That said there is not a lot going on in terms of new developments since everyone just throws opentracker in a vps a calls it a day (honorable exceptions: aquatic and torrust).</p><p>I plan to continue development for the foreseeable future and add some (optional) esoteric features along the way so if anyone currently operates a tracker please give a try and enjoy the lack of crashes.</p><p>note: only swarm_printout.ex has been vibe coded, the rest has all been written by hand.</p>","contentLength":1060,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44323253"},{"title":"Show HN: EnrichMCP – A Python ORM for Agents","url":"https://github.com/featureform/enrichmcp","date":1750354341,"author":"bloppe","guid":205,"unread":true,"content":"<p>I've been working with the Featureform team on their new open-source project, [EnrichMCP][1], a Python ORM framework that helps AI agents understand and interact with your data in a structured, semantic way.</p><p>EnrichMCP is built on top of [MCP][2] and acts like an ORM, but for agents instead of humans. You define your data model using SQLAlchemy, APIs, or custom logic, and EnrichMCP turns it into a type-safe, introspectable interface that agents can discover, traverse, and invoke.</p><p>It auto-generates tools from your models, validates all I/O with Pydantic, handles relationships, and supports schema discovery. Agents can go from user → orders → product naturally, just like a developer navigating an ORM.</p><p>We use this internally to let agents query production systems, call APIs, apply business logic, and even integrate ML models. It works out of the box with SQLAlchemy and is easy to extend to any data source.</p>","contentLength":916,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44320772"},{"title":"Show HN: A DOS-like hobby OS written in Rust and x86 assembly","url":"https://github.com/krustowski/rou2exOS","date":1750340337,"author":"krustowski","guid":204,"unread":true,"content":"<p>To try it out, simply build the project yourself from source, or use attached bootable ISO image of the system (in Releases on Github) and run it in QEMU.</p>","contentLength":154,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=44318588"}],"tags":["dev","hn"]}