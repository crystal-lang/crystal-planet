{"id":"3MxaK2JpEReqSnmaGkKd8iyLQpHxJgRRqMaJeCefkkoBT47","title":"Hacker News - Newest: \"Crystal\"","displayTitle":"Hacker News - Newest: \"Crystal\"","url":"https://hnrss.org/newest?q=Crystal","feedLink":"https://news.ycombinator.com/newest","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":5,"items":[{"title":"Inside an Isotemp OCXO107-10 Oven Controlled Crystal Oscillator","url":"https://tomverbeure.github.io/2025/10/26/Inside-an-Isotemp-OCXO107-10.html","date":1761600946,"author":"zdw","guid":84,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45726597"},{"title":"Inside An Isotemp Oven Controlled Crystal Oscillator","url":"https://tomverbeure.github.io/2025/10/26/Inside-an-Isotemp-OCXO107-10.html","date":1761560244,"author":"thomasjb","guid":83,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45719250"},{"title":"A Closer Look at Piezoelectric Crystal","url":"https://www.samaterials.com/content/a-closer-look-at-stressed-piezo-crystals.html","date":1761149536,"author":"pillars","guid":82,"unread":true,"content":"<div>\n                        Last updated on {{lastDate}}                    </div><h2></h2><p align=\"center\"><strong></strong></p><h2></h2><p align=\"center\"><strong></strong></p><h2></h2><p align=\"center\"><strong></strong></p><h2></h2><p align=\"center\"><strong></strong></p><h3></h3><p><strong></strong></p><p><strong></strong></p><p><strong></strong></p><h3></h3><h3></h3><h2></h2><p align=\"center\"><strong></strong></p><p align=\"center\"><strong></strong></p><h3></h3><p align=\"center\"><strong></strong></p><p>²</p><p align=\"center\"><strong></strong></p><h3></h3><p align=\"center\"><strong></strong></p><h3></h3><p align=\"center\"><strong></strong></p>","contentLength":75,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45671336"},{"title":"From Raw Crystal to Crystal Oscillator – Crystals Go to War in 1943","url":"https://www.youtube.com/watch?v=duZlWWwxIPQ","date":1760979902,"author":"akshatjiwan","guid":81,"unread":true,"content":"","contentLength":0,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45646299"},{"title":"Crystal 1.18.0 Is Released","url":"https://crystal-lang.org/2025/10/14/1.18.0-released/","date":1760538644,"author":"sdogruyol","guid":80,"unread":true,"content":"<p>We are announcing a new Crystal release 1.18.0 with several new features and bug\nfixes.</p><p>This release includes <a href=\"https://github.com/crystal-lang/crystal/pulls?q=is%3Apr+milestone%3A1.18.0\">172 changes since\n1.17.1</a>\nby 31 contributors. We thank all the contributors for all the effort put into\nimproving the language! ❤️</p><p>Below we list the most remarkable changes in the language, compiler and stdlib.\nFor more details, visit the <a href=\"https://github.com/crystal-lang/crystal/releases/tag/1.18.0\">full\nchangelog</a>.</p><p>We do not expect any breaking changes in existing code. If you notice any\nunexpected issues, please let us know in the <a href=\"https://github.com/crystal-lang/crystal/issues\">issue tracker</a> or <a href=\"https://forum.crystal-lang.org/\">forum</a>.</p><p>Execution contexts from <a href=\"https://github.com/crystal-lang/rfcs/pull/2\">RFC 0002</a> continue as a preview feature with opt-in\nwith compiler flags <code>-Dpreview_mt -Dexecution_context</code>. It might move out of\npreview in the next release.</p><p>The preview of synchronization primitives in <a href=\"https://github.com/ysbaddaden/sync/\"></a> has seen some\nimprovements as well.</p><p>Deprecation warnings are now available on types and aliases (<a href=\"https://github.com/crystal-lang/crystal/issues/15962\">#15962</a>) as well\nas individual method parameters (<a href=\"https://github.com/crystal-lang/crystal/issues/15999\">#15999</a>).\nDeprecated types only trigger warnings when they are actually  (e.g.\ncalling a class method), not when they’re just part of a type restriction, for\nexample.\nDeprecated parameters only trigger a warning when the particular parameter is\nused in a call. Calls without this parameter are unaffected.</p><div><div><pre><code></code></pre></div></div><p>The format of <a href=\"https://crystal-lang.org/api/1.18.0/Time.html#inspect(io:IO,with_nanoseconds=true):Nil-instance-method\"></a> has been adjusted slightly to align with the Internet\nExtended Date/Time Format (IXDTF) defined in <a href=\"https://datatracker.ietf.org/doc/html/rfc9557\">RFC 9557</a> (<a href=\"https://github.com/crystal-lang/crystal/issues/16039\">#16039</a>).</p><p>Changes from the previous format:</p><ul><li>Replace  location by  offset</li><li>Skip zero nanoseconds entirely even when  is true (see https://github.com/crystal-lang/crystal/pull/16039#discussion_r2250863021)</li><li>Remove whitespace between time and offset</li><li>Wrap location in square brackets to indicate an IXDTF time-zone suffix</li></ul><p>Some examples show the differences:</p><div><div><pre><code></code></pre></div></div><p>The local Windows system time zone now uses the canonical IANA name (<a href=\"https://github.com/crystal-lang/crystal/issues/15967\">#15967</a>).</p><p>The output of <a href=\"https://crystal-lang.org/api/1.18.0/JSON/Any.html#inspect(io:IO):Nil-instance-method\"></a> got a wrapper to indicate\nthe  type and differentiate from the wrapped type (<a href=\"https://github.com/crystal-lang/crystal/issues/15979\">#15979</a>).\nThe equivalent for  is still pending.</p><div><div><pre><code></code></pre></div></div><p>The private constructors of  moved into the \nhook (<a href=\"https://github.com/crystal-lang/crystal/issues/16147\">#16147</a>). They’re now defined on the including types which is more robust\nin terms of  overload ordering. This also allows referring generic\ntype variables inside converters.</p><p><a href=\"https://crystal-lang.org/api/1.18.0/Colorize.html\"></a> now uses scoped ANSI reset codes which only reset the respective\nproperty, instead of resetting  (<a href=\"https://github.com/crystal-lang/crystal/issues/16052\">#16052</a>).</p><p>We added type restrictions to many API methods. This improves the documentation.\nThis is a semi-automatic effort, assisted by a tool that automatically extracts\ntyping information from the semantic analysis of a program (<a href=\"https://github.com/crystal-lang/crystal/issues/15682\">#15682</a>).</p><p>Multi-line strings containing source code in compiler specs have had two\ndifferent formats: Some of them were using regular string literals, others used\nheredocs. The latter was usually preferred in new code additions because\nline numbers and indents are more sensible. And with an appropriate heredoc\nidentifier to denote the language, we even get nested syntax highlighting.\nIn this release we’ve converted all compiler specs to use heredocs\n(<a href=\"https://github.com/crystal-lang/crystal/issues/11291\">#11291</a>).</p><p>With the help of , we’ve enabled and applied a couple more linter rules:\n (<a href=\"https://github.com/crystal-lang/crystal/issues/16010\">#16010</a>),  (<a href=\"https://github.com/crystal-lang/crystal/issues/16011\">#16011</a>), and\n (<a href=\"https://github.com/crystal-lang/crystal/issues/16014\">#16014</a>).</p><p>The compiler can dump type information to a JSON file when the environment\nvariable  is set (<a href=\"https://github.com/crystal-lang/crystal/issues/16027\">#16027</a>).</p><p>Resolve types when guessing return type from class method overloads (<a href=\"https://github.com/crystal-lang/crystal/issues/16118\">#16118</a>).</p><p>In the following snippet, the compiler is able to infer ’s type to be , since both overloads of  have a return type of :</p><div><div><pre><code></code></pre></div></div><p>Guess instance variable types from global method calls (<a href=\"https://github.com/crystal-lang/crystal/issues/16119\">#16119</a>).</p><p>This allows the following to compile:</p><div><div><pre><code></code></pre></div></div><p>The call needs to be global; other than that, type guessing for top-level methods has the same limitations as for class methods.</p><p>Hash literals are evaluated from left to right, fixing a regression from 1.6.0 (<a href=\"https://github.com/crystal-lang/crystal/issues/16124\">#16124</a>).</p><p>Temporary variables are now grouped by file name in order to increase the chance\nof reusing previous macro expansions (<a href=\"https://github.com/crystal-lang/crystal/issues/16122\">#16122</a>).</p><ul><li>Fully exit the process on  from REPL (<a href=\"https://github.com/crystal-lang/crystal/issues/16171\">#16171</a>)</li><li>Fixed interpreter hanging on the signal pipe (<a href=\"https://github.com/crystal-lang/crystal/issues/16167\">#16167</a>)</li></ul><ul><li>Support for LLVM 21.1 and 22.0 (<a href=\"https://github.com/crystal-lang/crystal/issues/16062\">#16062</a>)</li><li>Update Unicode to 17.0.0 (<a href=\"https://github.com/crystal-lang/crystal/issues/16160\">#16160</a>)</li></ul><div><p>We have been able to do all of this thanks to the continued support of\n <a href=\"https://www.84codes.com/\">84codes</a> and every other <a href=\"https://crystal-lang.org/sponsors\">sponsor</a>.  To\n maintain and increase the development pace, donations and sponsorships are\n essential.  <a href=\"https://opencollective.com/crystal-lang\">OpenCollective</a> is\n available for that.</p><p>Reach out to <a href=\"mailto:crystal@manas.tech\">crystal@manas.tech</a> if you’d like to\n become a direct sponsor or find other ways to support Crystal. We thank you in\n advance!</p><a href=\"https://crystal-lang.org/sponsors#contribute\">Contribute</a></div>","contentLength":4293,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":"https://news.ycombinator.com/item?id=45593192"}],"tags":["HN","hn"]}