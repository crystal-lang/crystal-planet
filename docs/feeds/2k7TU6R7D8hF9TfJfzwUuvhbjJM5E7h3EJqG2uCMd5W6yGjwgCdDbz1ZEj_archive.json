{"id":"2k7TU6R7D8hF9TfJfzwUuvhbjJM5E7h3EJqG2uCMd5W6yGjwgCdDbz1ZEj","title":"Crystal Releases","displayTitle":"Releases","url":"https://crystal-lang.org/releases/feed.xml","feedLink":"https://crystal-lang.org/","isQuery":false,"isEmpty":false,"isHidden":false,"itemCount":2,"items":[{"title":"Crystal 1.17.1 is released!","url":"https://crystal-lang.org/2025/07/22/1.17.0-released/","date":1753142400,"author":"Johannes Müller","guid":7,"unread":true,"content":"<p>We are announcing a new Crystal release 1.17.1 with a regression bug fix.</p><p>This release includes <a href=\"https://github.com/crystal-lang/crystal/pulls?q=is%3Apr+milestone%3A1.17.1\">2 changes since\n1.17.0</a>\nby 2 contributors.  We thank all the contributors for all the effort put into\nimproving the language! ❤️</p><p>This patch release only fixes a regression in the doc generator introduced in\n1.17.0, which would insert links to out-of-tree files (<a href=\"https://github.com/crystal-lang/crystal/pull/15996\">#15996</a>).</p><div><div>We have been able to do all of this thanks to the continued\n</div><p>support of <a href=\"https://www.84codes.com/\">84codes</a> and every other\n <a href=\"https://crystal-lang.org/sponsors\">sponsor</a>. To maintain and increase the development pace, donations\n and sponsorships are essential.\n <a href=\"https://opencollective.com/crystal-lang\">OpenCollective</a> is available for\n that.</p><p>Reach out to <a href=\"mailto:crystal@manas.tech\">crystal@manas.tech</a> if you’d like to\n become a direct sponsor or find other ways to support Crystal. We thank you in\n advance!</p><a href=\"https://crystal-lang.org/sponsors#contribute\">Contribute</a></div>","contentLength":751,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null},{"title":"Crystal 1.17.0 is released!","url":"https://crystal-lang.org/2025/07/16/1.17.0-released/","date":1752624000,"author":"Johannes Müller","guid":6,"unread":true,"content":"<p>We are announcing a new Crystal release 1.17.0 with several new features and bug\nfixes.</p><p>This release includes <a href=\"https://github.com/crystal-lang/crystal/pulls?q=is%3Apr+milestone%3A1.17.0\">187 changes since\n1.16.3</a>\nby 19 contributors.  We thank all the contributors for all the effort put into\nimproving the language! ❤️</p><p>Below we list the most remarkable changes in the language, compiler and stdlib.\nFor more details, visit the <a href=\"https://github.com/crystal-lang/crystal/releases/tag/1.17.0\">full\nchangelog</a>.</p><p>The following changes break prior behavior of the compiler, but we expect them\nto not break much in existing code. If you notice any unexpected issues, please\nlet us know in the <a href=\"https://github.com/crystal-lang/crystal/issues\">issue tracker</a> or <a href=\"https://forum.crystal-lang.org/\">forum</a>.</p><h4> only on TTY by default</h4><p><a href=\"https://crystal-lang.org/api/1.17.0/Colorize.html#on_tty_only!:Bool-class-method\"></a> is now the default behavior. It seems sensible to have\ncolorization only enabled implicitly when writing to a TTY the supports colors\n(<a href=\"https://github.com/crystal-lang/crystal/issues/15881\">#15881</a>).</p><p>Previously, it would always be enabled unless the\n<a href=\"https://no-color.org/\"></a> environment variable was set. Now the default\nhonors this variable, checks the standard streams are TTYs and  is not\n, just as  did already.\nThe old behaviour is available by setting <a href=\"https://crystal-lang.org/api/1.17.0/Colorize.html#enabled%3D%28enabled%3ABool%29-class-method\"></a> explicitly:</p><div><div><pre><code></code></pre></div></div><p>Calling  is no longer necessary, unless you want to\nexplicitly reset after the default is overridden.</p><div><div><pre><code></code></pre></div></div><h4>Manual memory management for </h4><p>The  bindings are switching to use manual memory management (<a href=\"https://github.com/crystal-lang/crystal/issues/15906\">#15906</a>).</p><p>There are no breaking changes in the exposed stdlib API and we do not expect any\nissues if you’re only using that.\nHowever, custom extensions that use  directly in conjunction with\nstdlib API nodes may break in some specific use cases.\nWhen linking a node into a document, it’s necessary to update the\n reference accordingly.</p><p>The API methods that expose internal details of  are considered unsafe\nand we’re soft-deprecating them. They’re not documented anymore, but still\ncontinue to work.</p><p>We’re planning to expose more features for DOM manipulation in the stdlib API,\nso nobody has to extend the  integration themselves. As a first step,\nwe’re introducing  as a subclass of  for document\nnodes. This is not expected to break anything.\nFollow the progress in <a href=\"https://github.com/crystal-lang/crystal/issues/15915\">#15915</a>.</p><p>We used to plug the garbage collector as memory allocator for .\nThis worked well so far, but with the newest release libxml 2.14 it causes segfaults when using\nmulti-threading and a GC cycle happens while executing a libxml function.\nIn addition, the libxml2 distributed in macOS 15.4 is patched to remove the\ncustom memory allocators API entirely, so support for it was broken. With this change, it is now properly supported.</p><h4>Blocking behaviour of file descriptors</h4><ul><li>On UNIX systems, there is no immediate effect: the existing event loops\n(libevent, epoll and kqueue) keep using non-blocking mode.</li><li>On Windows, we don’t set the file descriptor to non-blocking anymore. There\nreally is no need for that with overlapped IO. Instead, file IO is now fully\nasync with overlapped IO.</li></ul><p>Future event loops (such as ) may default to blocking mode.</p><p>Also, the  parameter is deprecated. It’s not necessary to configure\nin the constructor (<a href=\"https://github.com/crystal-lang/crystal/issues/15924\">#15924</a>). It’s still possible to change the mode after\ncreation with <a href=\"https://crystal-lang.org/api/1.17.0/Socket.html#blocking=(value)-instance-method\"></a>.</p><p>The helper method <a href=\"https://crystal-lang.org/api/1.17.0/IO/Error.html#from_errno(message,**opts)-macro\"></a> is now a macro. This ensures it\npromptly reads <a href=\"https://crystal-lang.org/api/1.17.0/Errno.html#value%3Aself-class-method\"></a> from the previous lib call, without contamination\nfrom evaluating other arguments. The macro keeps the same signature as the class\nmethod, so we expect no friction (<a href=\"https://github.com/crystal-lang/crystal/issues/15874\">#15874</a>).</p><h3>Execution Contexts and Multi-Threading</h3><p>Execution contexts from <a href=\"https://github.com/crystal-lang/rfcs/pull/2\">RFC 0002</a> are still a preview feature, but getting more\nand more into shape.</p><p>In light of upcoming changes to the relation between schedulers and threads, we\nwant to make it clear that execution contexts are more about the intent (“how\nfibers run”) and threads are only a technical means for achieving parallelism.\nAs a result, we’re renaming the execution context implementations (<a href=\"https://github.com/crystal-lang/crystal/issues/15936\">#15936</a>):</p><p><code></code> keeps its name, it does not have a\nconnection to threads.</p><p>With this release, we’re getting more stability. And there’s progress in related\nareas, such as improving multi-threaded support for stdlib libraries like .\nWork has begun on decoupling schedulers from threads which will make\nit easy to react to blocking lib calls without blocking other fibers in the\nexecution context (<a href=\"https://github.com/crystal-lang/crystal/issues/15871\">#15871</a>).</p><p>Check out <a href=\"https://github.com/ysbaddaden/sync/\"></a> for a preview of\nsynchronization primitives to build concurrent-safe and parallel-safe data\nstructures.</p><p>Windows support is going steady with a number of improvements in this release:</p><ul><li>Support for Windows local device paths in  (<a href=\"https://github.com/crystal-lang/crystal/issues/15590\">#15590</a>)</li><li>Support for Windows system time zone transitions in all years (<a href=\"https://github.com/crystal-lang/crystal/issues/15891\">#15891</a>)</li><li>Fixed IANA time zone names for Windows system time zones (<a href=\"https://github.com/crystal-lang/crystal/issues/15914\">#15914</a>)</li></ul><p>Macro expressions now support further expressions after an  expression:  (<a href=\"https://github.com/crystal-lang/crystal/issues/15917\">#15917</a>).</p><p><a href=\"https://crystal-lang.org/api/1.17.0/Enum.html#from_value(value:Int):self-class-method\"></a> now raises  instead of  (<a href=\"https://github.com/crystal-lang/crystal/issues/15624\">#15624</a>).\nThis should not break anything because it’s just a more specialized subclass.</p><p>We improved the parser for TZif database files adding support for version 4\n(<a href=\"https://github.com/crystal-lang/crystal/issues/15825\">#15825</a>) and parsing POSIX TZ strings (<a href=\"https://github.com/crystal-lang/crystal/issues/15863\">#15863</a>). POSIX TZ environment\nvariable strings are also supported in the  environment variable (<a href=\"https://github.com/crystal-lang/crystal/issues/15792\">#15792</a>).</p><div><div><pre><code></code></pre></div></div><h4>Ensuring string suffix and prefix</h4><div><div><pre><code></code></pre></div></div><div><div><pre><code></code></pre></div></div><h4>Helper methods for subclasses</h4><p>We split <a href=\"https://crystal-lang.org/api/1.17.0/HTTP/StaticFileHandler.html#call(context):Nil-instance-method\"></a> into structured sub-components, so there are\nnow a number of helper methods to override individual aspects in custom\nsubclasses (<a href=\"https://github.com/crystal-lang/crystal/issues/15678\">#15678</a>).</p><p>Similarly, <a href=\"https://crystal-lang.org/api/1.17.0/HTTP/WebSocket.html\"></a> now has explicit  and  helper\nmethods for easy overriding with custom behaviour (<a href=\"https://github.com/crystal-lang/crystal/issues/15545\">#15545</a>).</p><p>The new CLI option  configures emitting assembly code in Intel\nstyle (<a href=\"https://github.com/crystal-lang/crystal/issues/15612\">#15612</a>).</p><p>Stringification of several AST nodes has been improved: single line blocks\n(<a href=\"https://github.com/crystal-lang/crystal/issues/15568\">#15568</a>), multiline named tuple literals (<a href=\"https://github.com/crystal-lang/crystal/issues/15566\">#15566</a>), multiline calls\n(<a href=\"https://github.com/crystal-lang/crystal/issues/15691\">#15691</a>), significant whitespace before a block body (<a href=\"https://github.com/crystal-lang/crystal/issues/15692\">#15692</a>),  (<a href=\"https://github.com/crystal-lang/crystal/issues/15919\">#15919</a>),  when stringifying  (<a href=\"https://github.com/crystal-lang/crystal/issues/15918\">#15918</a>), newline in\ntrailing expressions (<a href=\"https://github.com/crystal-lang/crystal/issues/15614\">#15614</a>), multiline (boolean) expressions (<a href=\"https://github.com/crystal-lang/crystal/issues/15709\">#15709</a>),\n as call receiver (<a href=\"https://github.com/crystal-lang/crystal/issues/15801\">#15801</a>).</p><p>We have a new compiler tool, , which generate a code\ncoverage report for macros (<a href=\"https://github.com/crystal-lang/crystal/issues/15738\">#15738</a>).</p><p>The Crystal repo has adopted <a href=\"https://crystal-ameba.github.io/\">ameba</a> for static code analysis and linting\n(<a href=\"https://github.com/crystal-lang/crystal/issues/15875\">#15875</a>), as well as and <a href=\"https://github.com/crate-ci/typos\">typos</a> for spell checking (<a href=\"https://github.com/crystal-lang/crystal/issues/15873\">#15873</a>).\nWith the help of these tools we have been able to improve code quality a lot,\nand continue doing so with continuous testing in CI.</p><div><div>We have been able to do all of this thanks to the continued\n</div><p>support of <a href=\"https://www.84codes.com/\">84codes</a> and every other\n <a href=\"https://crystal-lang.org/sponsors\">sponsor</a>. To maintain and increase the development pace, donations\n and sponsorships are essential.\n <a href=\"https://opencollective.com/crystal-lang\">OpenCollective</a> is available for\n that.</p><p>Reach out to <a href=\"mailto:crystal@manas.tech\">crystal@manas.tech</a> if you’d like to\n become a direct sponsor or find other ways to support Crystal. We thank you in\n advance!</p><a href=\"https://crystal-lang.org/sponsors#contribute\">Contribute</a></div>","contentLength":6308,"flags":null,"enclosureUrl":"","enclosureMime":"","commentsUrl":null}],"tags":["releases"]}